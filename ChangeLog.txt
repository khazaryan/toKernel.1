
 toKernel - Universal PHP Framework - CHANGELOG
 ==============================================

 Version 1.7.0 - 07 Mar 2016
 ---------------------------

 This is the Final Evolution 1.x version of toKernel Framework.
 The Version 1.x will not evolute after this release and will be supported only.

 However, the version 2.x will be expanded and get more interest news with addons.

 --

 Installation guide with MySQL Sample database - Version 1.0.0

    With this guide, you can setup toKernel Framework and start you development.

        Just follow the steps and you'll be ready to go!
            - Setup Application in Web directory
            - Configure web access
            - Setup MySQL Database
            - Start test and enjoy!

    Files: /install/Install.txt

 Addon "test" removed

    Instead we included addon "example".
    See next:

    Files: /application/addons/test

 Addon "example" included - Version 1.0.0

    Addon "example" included to introduce some main concepts of toKernel framework functionality.

    In this addon you can look & feel the functionality of:
        - Addon action types.
        - Functionality in CLI (Command line interface)
        - Modules
        - Templates, Views, Widgets
        - Work with MySQL database (class library).
        And other...

    Files: /application/addons/example

 Extended "shopping_cart" class library in application.

    This is an example to demonstrate you, how to extend class libraries.
    See usage:
        File: /application/addons/example/lib/example.addon.php
        Line: 447

    File: application/lib/shopping_cart.lib.php

 Main parent view class - Version 1.3.2

    1. In the run() method, the values able to parse from {var.val_name} to variables like: $this->value.

        Example:

            --------
            In method where the view object used:

            $this->load_view('my_view');

            $data = array(
                'name' => 'My name',
                'age'  => 'My age X'
            );

            $view->show($data);

            --------
            In view file you can get values like:

            <h1>Something here!</h1>
            <p>Name: <?php echo $this->name; ?></p>
            <p>Age: {var.age}</p>

            ------

            See actual examples in files:
            File: /application/addons/example/lib/example.addon.php
            Line: 320

            File: application/addons/example/views/simple_with_params.view.php
            Line: 5

    File: /tokernel.framework/kernel/view.class.php

 Array class library - Version 1.1.0

    1. New method key_by_pos() in library.
        Returns key from array by position.

    2. Method array_key_rename() is deprecated.
        Instead you can use key_rename() method.

    3. Method array_key_pos() is deprecated.
        Instead you can use key_pos() method.

    File: /tokernel.framework/lib/array.lib.php

 CLI class library - Version 1.0.7

    1. Small big fixed.
        Because the "cli_php_bin" configuration value is not longer available in application.ini
        due to a server security issues in many shared hostings, the cli class library shows just
        "/usr/bin/php" in usage message.

    File: /tokernel.framework/lib/cli.lib.php

 Date class library - Version 2.0.0

    1. The methods in this library was successfully refactored.

    File: /tokernel.framework/lib/date.lib.php

 Filter class library - Version 1.4.2

    1. Small bug fixed.
        $this->lib->array->is_assoc($data)
        instead of:
        $this->lib->data->is_assoc($data)

    File: /tokernel.framework/lib/filter.lib.php

 Form validation class library - Version 2.0.0

    The new generation of form validation class library available now with new rules and features.

    1. New rules added to validate:

        - different_from (check if value different than given element value)
        - in (check if value exists in given array of values)
        - date (check if valid date with given format)
        - date_before (check if date is before given date value)
        - date_after (check if date is after given date value)
        - regex (check value with given regular expression)

    2. It is now possible to set custom message to rules.

        Example:

        $rules = array(
            'car_model' => array(
                'required' => true
            ),
            'device_model' => array(
                'required' => true
            ),
        );

        $messages = array(
            'car_model' => array(
                'required' => 'Please enter the model of your car!'
            )
        );

        // As you can see, the "car_model" have message set by you,
        // when the "device_model" will display default message from application language.

        $this->lib->form_validation->add_rules($rules, $messages);

    3. "required" rule should be defined for any required element.

        If the element value is required, the "required" rule should be defined.
        For example, you have a rule listed bellow and the value is empty,
        the validation will be passed as true:

        $rules = array(
            'email_address' => array(
                'email' => true
            )
        );

        Instead, you have to add "required" rule too:

        $rules = array(
            'email_address' => array(
                'email' => true,
                'required' => true
            )
        );

        Because in practice we having a case when the value should be validated only if not empty.

    4. Define a new instance of form_validation library.

        It is now possible to define many instances of library with different rules.

        $rules_1 = array(...);
        $rules_2 = array(...);

        $fv_1 = $this->lib->form_validation->instance($rules_1);
        $fv_2 = $this->lib->form_validation->instance($rules_2);

        // So now, the $fv_2 and $fv_2 are different instances with different rules.

    File: /tokernel.framework/lib/form_validation.lib.php

 MySQL Class library - Version 3.0.0

    This is the new generation of MySQL class library with refactored code and new functionality.

    1. New CRUD methods insert(), update(), delete(), select_*() added.

    2. New Benchmarking functionality can log all your queries into dedicated log file.

    3. Transaction methods begin_trans(), commit_trans(), rollback_trans() added.

    See documentation at: http://tokernel.com/framework/documentation/class-libraries/mysql
    See examples in: /application/addons/example/modules/db_example.module.php

    File: /tokernel.framework/lib/mysql.lib.php

 Pagination class library - Version 1.1.0

    1. New dynamic way to define base url.

        This is the rid of very big head pain for many developers.

        Old style base url:
          $base_url = 'http://localhost/my_project/addon/action/param1/param2/param3/';
          // The pagination library will add a page number to end of url:
          // http://localhost/my_project/addon/action/param1/param2/param3/1

        New option to develop:
          $base_url = 'http://localhost/my_project/addon/action/{var.offset}/param1/param2/param3/';
          // The pagination library will replace the {var.offset} in string with page number.
          // http://localhost/my_project/addon/action/1/param1/param2/param3/
          // http://localhost/my_project/addon/action/2/param1/param2/param3/
          // So, it is possible to add in any part of string.

        Notice: if the item {var.offset} in base url not exists,
        a page number will be added to the end of url like before.

    File: /tokernel.framework/lib/pagination.lib.php

 Validation (valid) class library - Version 1.4.0

    1. New method date() added.
        You can validate a date with your given format.

    2. In all methods excepts password_strength() and credit_card()
        if the validation passed, than 'true' will be returned instead ov actual data value.

    3. Method az_09() is deprecated. Instead you can use method alpha_numeric().

    File: tokernel.framework/lib/valid.lib.php

 End of file